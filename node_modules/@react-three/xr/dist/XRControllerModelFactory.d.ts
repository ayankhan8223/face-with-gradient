import { Object3D } from 'three';
import type { Texture } from 'three';
import { GLTFLoader, MotionController } from 'three-stdlib';
export declare class XRControllerModel extends Object3D {
    envMap: Texture | null;
    motionController: MotionController | null;
    scene: Object3D | null;
    constructor();
    setEnvironmentMap(envMap: Texture): XRControllerModel;
    connectModel(scene: Object3D): void;
    connectMotionController(motionController: MotionController): void;
    /**
     * Polls data from the XRInputSource and updates the model's components to match
     * the real world data
     */
    updateMatrixWorld(force: boolean): void;
    disconnect(): void;
    dispose(): void;
}
export declare class XRControllerModelFactory {
    gltfLoader: GLTFLoader;
    path: string;
    private _assetCache;
    constructor(gltfLoader?: GLTFLoader | null, path?: string);
    initializeControllerModel(controllerModel: XRControllerModel, event: any): void;
}
